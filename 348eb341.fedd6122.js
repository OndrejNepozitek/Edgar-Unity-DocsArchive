(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{120:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return p}));var r=a(3),o=a(7),n=(a(0),a(375)),i=a(378),l=(a(380),{title:"(PRO) Fog of war"}),s={unversionedId:"guides/fog-of-war",id:"version-2.0.0-alpha.6/guides/fog-of-war",isDocsHomePage:!1,title:"(PRO) Fog of war",description:"In this guide, we will learn how to enable a simple fog of war functionality.",source:"@site/versioned_docs\\version-2.0.0-alpha.6\\guides\\fog-of-war.md",slug:"/guides/fog-of-war",permalink:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/fog-of-war",editUrl:"https://github.com/OndrejNepozitek/Edgar-Unity/tree/docusaurus/versioned_docs/version-2.0.0-alpha.6/guides/fog-of-war.md",version:"2.0.0-alpha.6",sidebar:"version-2.0.0-alpha.6/docs",previous:{title:"Current room detection",permalink:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/current-room-detection"},next:{title:"(PRO) Minimap",permalink:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/minimap"}},c=[{value:"Limitations",id:"limitations",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Example scene",id:"example-scene",children:[]},{value:"Setup",id:"setup",children:[{value:"Add Fog of War component",id:"add-fog-of-war-component",children:[]},{value:"Include shader in build",id:"include-shader-in-build",children:[]},{value:"Add custom renderer feature",id:"add-custom-renderer-feature",children:[]},{value:"Add custom post-processing logic",id:"add-custom-post-processing-logic",children:[]},{value:"Add trigger colliders",id:"add-trigger-colliders",children:[]}]},{value:"API",id:"api",children:[]},{value:"Configuration and examples",id:"configuration-and-examples",children:[{value:"Fog color",id:"fog-color",children:[]},{value:"Transition mode",id:"transition-mode",children:[]},{value:"Wave mode",id:"wave-mode",children:[]},{value:"Fade In mode",id:"fade-in-mode",children:[]},{value:"Reveal Corridors",id:"reveal-corridors",children:[]}]},{value:"Implementation and performance",id:"implementation-and-performance",children:[]},{value:"Advanced",id:"advanced",children:[{value:"Serialization",id:"serialization",children:[]}]}],d={toc:c};function p(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(n.b)("wrapper",Object(r.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"In this guide, we will learn how to enable a simple fog of war functionality."),Object(n.b)(i.c,{src:"img/v2/guides/fog_of_war/example.gif",caption:"Fog of War example (exported to a GIF with low FPS, everything is smooth ingame)",mdxType:"Image"}),Object(n.b)("h2",{id:"limitations"},"Limitations"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Performance on large levels")," - Not suitable for very large levels (e.g. area larger than 500x500 tiles) - see ",Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/fog-of-war#implementation-and-performance"}),"Implementation and performance")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Cell size of the grid")," - The Fog of War currently works only when the ",Object(n.b)("em",{parentName:"li"},"Cell size")," of the Grid is set to ",Object(n.b)("em",{parentName:"li"},"1")," and the ",Object(n.b)("em",{parentName:"li"},"Cell gap")," set to ",Object(n.b)("em",{parentName:"li"},"0"),". If you want to use this feature and have a different cell size or cell gap, please let me know on ",Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/OndrejNepozitek/Edgar-Unity/issues"}),"Github")," and I will try to improve the implementation.")),Object(n.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Built-in Render Pipeline")," - works in Unity 2018.4+"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Lightweight Render Pipeline (LWRP)")," - version >= 6.5 of LWRP is needed (and therefore Unity 2019.2+)"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Universal Render Pipeline (URP)")," - version >= 7.0 of URP is needed (and therefore Unity 2019.3+)",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"IMPORTANT!")," - this feature ",Object(n.b)("strong",{parentName:"li"},"does not")," work with the ",Object(n.b)("strong",{parentName:"li"},"2D Renderer (Experimental)")," as it is still experimental and people in Unity have not yet implemented custom renderer features!"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"High Definition Render Pipeline (HDRP)")," - currently not supported")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"Note:")," Additional setup steps are needed for LWRP and URP, see below.")),Object(n.b)("h2",{id:"example-scene"},"Example scene"),Object(n.b)("p",null,"An example scene can be found at ",Object(n.b)("em",{parentName:"p"},"ProceduralLevelGenerator/Examples/FogOfWarExample"),". "),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"Note:")," Please see the ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/fog-of-war#add-custom-renderer-feature"}),"Add custom renderer feature")," setup step below to make the example scene work in URP/LWRP.")),Object(n.b)("h2",{id:"setup"},"Setup"),Object(n.b)("p",null,"There are several steps that need to be done to enable the ",Object(n.b)("em",{parentName:"p"},"Fog of War")," feature. I tried to make the setup as simple as possible but it still requires some manual work."),Object(n.b)("h3",{id:"add-fog-of-war-component"},"Add Fog of War component"),Object(n.b)("p",null,"The first step is to add the ",Object(n.b)("strong",{parentName:"p"},"Fog of War")," component to the game object that holds the main camera of your game. The component has several settings, see the ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/fog-of-war#configuration-and-examples"}),"Configuration")," section."),Object(n.b)("h3",{id:"include-shader-in-build"},"Include shader in build"),Object(n.b)("p",null,"This feature uses a custom shader that you have to manually include in the build of you game. Navigate to ",Object(n.b)("em",{parentName:"p"},"Edit -> Project Settings -> Graphics")," and add the ",Object(n.b)("em",{parentName:"p"},"Edgar/FogOfWar")," shader to the ",Object(n.b)("em",{parentName:"p"},"Always Included Shaders")," list. If you do not do that, the game will work in the editor but it won't work in a standalone build."),Object(n.b)("h3",{id:"add-custom-renderer-feature"},"Add custom renderer feature"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"(URP and LWRP only)")," - This step is only required if you use URP or LWRP as they do not support the ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnRenderImage.html"}),"OnRenderImage()")," hook. To work around that, you have to manually add a custom renderer feature."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"LWRP"),": The first step is to create a custom ",Object(n.b)("strong",{parentName:"p"},"Forward Renderer")," asset if you do not have one already. This can be done in ",Object(n.b)("em",{parentName:"p"},"Create -> Rendering -> LWRP -> Forward Renderer"),". You have to make sure that this renderer is used in the render pipeline instead of the default one."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"URP"),": With URP, there should already exist a ",Object(n.b)("strong",{parentName:"p"},"Forward Renderer")," asset that was created with the render pipeline asset. Locate the renderer."),Object(n.b)("p",null,"The next step is to open the ",Object(n.b)("strong",{parentName:"p"},"Forward Renderer")," asset. Click the ",Object(n.b)("em",{parentName:"p"},"Add Renderer Feature")," and choose the ",Object(n.b)("em",{parentName:"p"},"Fog Of War Feature"),". Based on the render pipeline that you are using, the feature should be called ",Object(n.b)("em",{parentName:"p"},"Fog Of War LWRP Feature")," or ",Object(n.b)("em",{parentName:"p"},"Fog Of War URP Feature"),"."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"Note:")," If you do not see the ",Object(n.b)("em",{parentName:"p"},"Fog Of War Feature"),", make sure you meet the requirements as described ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/fog-of-war#prerequisites"}),"above"),". The feature is conditionally compiled only if there are all the required packages installed.")),Object(n.b)("h3",{id:"add-custom-post-processing-logic"},"Add custom post-processing logic"),Object(n.b)("p",null,"After a level is generated, we have to setup the Fog of War component. The best place to do that is in a ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/generators/post-process#custom-post-processing"}),"custom post-processing task"),". Sample code with comments can be seen below:"),Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{}),'[CreateAssetMenu(menuName = "Edgar/Examples/Fog of War/Post process", fileName = "FogOfWarPostProcess")]\npublic class FogOfWarPostProcess : DungeonGeneratorPostProcessBase\n{\n    public override void Run(GeneratedLevel level, LevelDescription levelDescription)\n    {\n        // To setup the FogOfWar component, we need to get the root game object that holds the level.\n        var generatedLevelRoot = level.RootGameObject;\n\n        // If we use the Wave mode, we must specify the point from which the wave spreads as we reveal a room.\n        // The easiest way to do so is to get the player game object and use its transform as the wave origin.\n        // Change this line if your player game object does not have the "Player" tag.\n        var player = GameObject.FindGameObjectWithTag("Player");\n\n        // Now we can setup the FogOfWar component.\n        // To make it easier to work with the component, the class is a singleton and provides the Instance property.\n        FogOfWar.Instance.Setup(generatedLevelRoot, player.transform);\n\n        // After the level is generated, we usually want to reveal the spawn room.\n        // To do that, we have to find the room instance that corresponds to the Spawn room.\n        // In this example, the spawn room is called "Spawn" so we find it by its name.\n        var spawnRoom = level\n            .GetRoomInstances()\n            .SingleOrDefault(x => x.Room.GetDisplayName() == "Spawn");\n\n        if (spawnRoom == null)\n        {\n            throw new InvalidOperationException("There must be exactly one room with the name \'Spawn\' for this example to work.");\n        }\n\n        // When we have the spawn room instance, we can reveal the room from the fog.\n        // We use revealImmediately: true so that the first room is revealed instantly,\n        // but it is optional.\n        FogOfWar.Instance.RevealRoom(spawnRoom, revealImmediately: true);\n    }\n}\n')),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"Note:")," More information about the API of the ",Object(n.b)("em",{parentName:"p"},"FogOfWar")," component can be found in the ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"/Edgar-Unity-DocsArchive/docs/2.0.0-alpha.6/guides/fog-of-war#api"}),"API")," section.")),Object(n.b)("p",null,"After enabling this post-processing task and starting the game, we should see that all but the spawn room are hidden in the fog. The last thing that we have to handle is to reveal rooms when we enter them."),Object(n.b)("h3",{id:"add-trigger-colliders"},"Add trigger colliders"),Object(n.b)("p",null,"The last step is to add trigger colliders that will reveal a room when the player enters that room. There are at least two possible ways of doing that:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Add colliders to all room templates and always reveal only the room for which the collider was triggered"),Object(n.b)("li",{parentName:"ol"},"Add colliders only to corridor room templates and when you trigger the collider reveal both the collider and its neighbours")),Object(n.b)("p",null,"In this tutorial, I decided to use the second option as it, in my opinion, looks better. This is the final result that we want to achieve:"),Object(n.b)(i.c,{src:"img/v2/guides/fog_of_war/colliders_goal.gif",caption:"Rooms are revealed after a corridor is visited",mdxType:"Image"}),Object(n.b)("p",null,"To achieve this, we have to slightly modify our corridor room templates. In each corridor room template, we create a child game object with a collider that has ",Object(n.b)("em",{parentName:"p"},"Is Trigger")," set to true. The collider should mark the area where the player has to stand to trigger the fog of war script. The easiest thing to do is to add a collider that covers the whole floor of the corridor. However, it is also possible to make the collider slightly smaller and trigger the script only when the player is closer to the centre of the corridor. Our example setup can be seen below:"),Object(n.b)(i.c,{src:"img/v2/guides/fog_of_war/colliders_setup.png",caption:"Setup of the corridor Fog of War trigger",mdxType:"Image"}),Object(n.b)("p",null,"The last step is to add a simple component (to the game object with the collider) that will call the Fog of War script when the collider is triggered:"),Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{}),'public class FogOfWarExampleTriggerHandler : MonoBehaviour\n{\n    private RoomInstance roomInstance;\n\n    private void Start()\n    {\n        roomInstance = GetRoomInstance();\n    }\n\n    private RoomInstance GetRoomInstance()\n    {\n        // The goal of this method is to get the RoomInstance of the corresponding room template\n        // so that we can pass it to the FogOfWar script.\n\n        // Get the root game object of the room template\n        var roomTemplate = transform.parent.gameObject;\n\n        // Each room template has a RoomInfo component attached\n        var roomInfo = roomTemplate.GetComponent<RoomInfo>();\n\n        // The RoomInfo component has a RoomInstance property containing information about the room\n        return roomInfo.RoomInstance;\n    }\n\n    private void OnTriggerEnter2D(Collider2D otherCollider)\n    {\n        // Make sure that the player game object has the "Player" tag\n        // or remove/modify this line.\n        if (otherCollider.gameObject.CompareTag("Player"))\n        {\n            FogOfWar.Instance.RevealRoomAndNeighbors(roomInstance);\n        }\n    }\n}\n')),Object(n.b)("p",null,"After you modify all your corridor room templates, the Fog of War should work as expected."),Object(n.b)("h2",{id:"api"},"API"),Object(n.b)("p",null,"Up-to-date API documentation can be found ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"https://ondrejnepozitek.github.io/ProceduralLevelGenerator-UnityApiDocs/master/api/Edgar.Unity.FogOfWar.html"}),"here"),"."),Object(n.b)("h2",{id:"configuration-and-examples"},"Configuration and examples"),Object(n.b)("h3",{id:"fog-color"},"Fog color"),Object(n.b)("p",null,"The ",Object(n.b)("em",{parentName:"p"},"FogColor")," property specifies the colour of tiles that are hidden in the fog. It defaults to black but in our example scene we use purple as that is the colour which works best with the tileset."),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/fog_color_purple.png",caption:"FogColor set to purple",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/fog_color_black.png",caption:"FogColor set to black",mdxType:"GalleryImage"})),Object(n.b)("h3",{id:"transition-mode"},"Transition mode"),Object(n.b)("p",null,"The ",Object(n.b)("em",{parentName:"p"},"Transition mode")," property specifies what to do when there are two neighbouring tiles with different fog values (i.e. one tile is less revealed than the other tile). If we use the ",Object(n.b)("em",{parentName:"p"},"Smooth")," mode, the colours of pixels on the two tiles will smoothly interpolate from one fog value to the other. On the other hand, if we use the ",Object(n.b)("em",{parentName:"p"},"Tile Based")," mode, no interpolation will be used and there will be a strict division between the fog values of the two tiles."),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/transition_mode_smooth.gif",caption:"TransitionMode set to Smooth (gif)",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/transition_mode_tile_based.gif",caption:"TransitionMode set to Tile Based (gif)",mdxType:"GalleryImage"})),Object(n.b)("h3",{id:"wave-mode"},"Wave mode"),Object(n.b)("p",null,"The first available mode is the ",Object(n.b)("strong",{parentName:"p"},"Wave mode"),". With the ",Object(n.b)("em",{parentName:"p"},"Wave mode"),", the fog reveals based on the distance of individual tiles from the player. The tiles that are close to the player are revealed sooner than tiles that are far from the player. There are two properties that alter the behaviour when in the ",Object(n.b)("em",{parentName:"p"},"Wave mode"),": "),Object(n.b)("h4",{id:"wavespeed"},Object(n.b)("inlineCode",{parentName:"h4"},"WaveSpeed")),Object(n.b)("p",null,"The ",Object(n.b)("strong",{parentName:"p"},"WaveSpeed")," property specifies how fast the wave moves and its unit is ",Object(n.b)("em",{parentName:"p"},"tiles per second"),". If we have a tile that is 15 tiles away from the player and the wave speed is set to 5, then the tile will be fully revealed 15/5 = 3 seconds after triggering the fog of war script."),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/wave_speed_10.gif",caption:"WaveSpeed set to 10 tiles per second (gif)",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/wave_speed_1.gif",caption:"WaveSpeed set to 1 tile per second (gif)",mdxType:"GalleryImage"})),Object(n.b)("h4",{id:"waverevealthreshold"},Object(n.b)("inlineCode",{parentName:"h4"},"WaveRevealThreshold")),Object(n.b)("p",null,"The ",Object(n.b)("strong",{parentName:"p"},"WaveRevealThreshold")," property specifies for how long is a tile completely hidden before it starts to be revealed. If we set the value to 0, all tiles to be revealed will immediately have non-zero opacity. The tiles that are close to the player will quickly have their full opacity while it will take longer for tiles that are far away. If we set the value to 0.5 and have a tile that should be fully revealed after 3 seconds, it will make the tile completely hidden for 0.5 * 3 = 1.5 seconds and only after that the opacity will be increased and the tile will be fully revealed after additional 1.5 seconds. As a result, it will look like the wave actually moves."),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/wave_reveal_threshold_0.gif",caption:"WaveRevealThreshold set to 0 (gif)",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/wave_reveal_threshold_0_5.gif",caption:"WaveRevealThreshold set to 0.5 (gif)",mdxType:"GalleryImage"})),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"Note:")," It is not recommended to use values higher than 0.5 in the combination with the Smooth transition mode.")),Object(n.b)("h3",{id:"fade-in-mode"},"Fade In mode"),Object(n.b)("p",null,"The second available mode is the ",Object(n.b)("strong",{parentName:"p"},"Fade In mode"),". With the ",Object(n.b)("em",{parentName:"p"},"Fade In mode"),", all the tiles are revealed at the same time no matter the distance from the player. There is a single property that alters the behaviour of this mode:"),Object(n.b)("h4",{id:"fadeinduration"},Object(n.b)("inlineCode",{parentName:"h4"},"FadeInDuration")),Object(n.b)("p",null,"The ",Object(n.b)("strong",{parentName:"p"},"FadeInDuration")," property specifies after how many seconds should the tiles be completely revealed. Value ",Object(n.b)("em",{parentName:"p"},"0")," means that all the tiles will be revealed immediately after triggering the fog of war script."),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/fade_in_duration_0.gif",caption:"FadeInDuration set to 0 seconds (gif)",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/fade_in_duration_5.gif",caption:"FadeInDuration set to 5 seconds (gif)",mdxType:"GalleryImage"})),Object(n.b)("h3",{id:"reveal-corridors"},"Reveal Corridors"),Object(n.b)("p",null,"The ",Object(n.b)("strong",{parentName:"p"},"RevealCorridors")," checkbox specifies whether you want to reveal some of the tiles from neighbouring corridor rooms even though the rooms themselves are not yet fully revealed. The main purpose of this feature is aesthetics - in my opinion, the game looks better when the corridor tiles gradually fade away. There are two properties that alter the behaviour of this feature:"),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/reveal_corridors_enabled.png",caption:"RevealCorridors enabled",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/reveal_corridors_disabled.png",caption:"RevealCorridors disabled",mdxType:"GalleryImage"})),Object(n.b)("h4",{id:"revealcorridorstiles"},Object(n.b)("inlineCode",{parentName:"h4"},"RevealCorridorsTiles")),Object(n.b)("p",null,"The ",Object(n.b)("strong",{parentName:"p"},"RevealCorridorsTiles")," property specifies how many tiles of each corridor should be revealed. To be more precise, it specifies the maximum distance of tiles (counted from the doors of the corridor) that should be revealed."),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/reveal_corridors_tiles_1.png",caption:"RevealCorridorsTiles set to 1",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/reveal_corridors_tiles_3.png",caption:"RevealCorridorsTiles set to 3",mdxType:"GalleryImage"})),Object(n.b)("h4",{id:"revealcorridorsgradually"},Object(n.b)("inlineCode",{parentName:"h4"},"RevealCorridorsGradually")),Object(n.b)("p",null,"The ",Object(n.b)("strong",{parentName:"p"},"RevealCorridorsGradually")," property specifies whether corridor tiles should gradually fade out until they are barely visible."),Object(n.b)(i.a,{cols:2,mdxType:"Gallery"},Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/reveal_corridors_gradually_enabled.png",caption:"RevealCorridorsGradually enabled",mdxType:"GalleryImage"}),Object(n.b)(i.b,{src:"img/v2/guides/fog_of_war/reveal_corridors_gradually_disabled.png",caption:"RevealCorridorsGradually disabled",mdxType:"GalleryImage"})),Object(n.b)("h2",{id:"implementation-and-performance"},"Implementation and performance"),Object(n.b)("p",null,"The Fog of War is implemented as an Image Effect (built-in render pipeline) or a Render Feature (URP). The script keeps track of which tiles should be revealed and passes this information to a shader via a texture where each pixel represents a single tile in the level. Based on the colour of individual pixels, the shader lerps between the actual tile graphics and the fog colour. All transitions are done on a CPU - when the fog changes, an updated texture is sent to the GPU."),Object(n.b)("p",null,"The main performance bottleneck is when some of the revealed tiles do not fit in the fog texture. The script starts with a 1x1 texture and when the first room is revealed, it creates a new texture that is large enough to fit all the revealed tiles (plus a bit extra to make sure that we do not have to do this too often). This process repeats every time the texture is too small. The problem is that as the texture gets larger, more CPU time is needed to create the texture and upload it to the GPU. I did a simple benchmark and it looks like the performance is good enough for levels with up to 250k tiles (i.e. the bounding box of the level is approx. 500x500 tiles). For larger levels, the game freezes for a while when the texture is recreated. However, the average level generated by the plugin should be much smaller than that so the performance of the game should not be affected by the Fog of War script."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"Note:")," If you have problems with the performance of the Fog of War script, please create a Github issue.")),Object(n.b)("p",null,"If you want to have the minimum possible performance footprint, do not use any animated transitions. Use the ",Object(n.b)("em",{parentName:"p"},"Fade In")," mode and set the ",Object(n.b)("em",{parentName:"p"},"Fade In Duration")," to ",Object(n.b)("em",{parentName:"p"},"0 seconds"),". With this configuration, the script will compute something only in the frame when a room is revealed."),Object(n.b)("h2",{id:"advanced"},"Advanced"),Object(n.b)("h3",{id:"serialization"},"Serialization"),Object(n.b)("p",null,"TBD."))}p.isMDXComponent=!0},375:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var r=a(0),o=a.n(r);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(a),h=r,u=p["".concat(i,".").concat(h)]||p[h]||m[h]||n;return a?o.a.createElement(u,l(l({ref:t},c),{},{components:a})):o.a.createElement(u,l({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,i=new Array(n);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<n;c++)i[c]=a[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"},376:function(e,t,a){"use strict";a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return i}));var r=a(22),o=a(377);function n(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(r.default)();return{withBaseUrl:(a,r)=>function(e,t,a,{forcePrependBaseUrl:r=!1,absolute:n=!1}={}){if(!a)return a;if(a.startsWith("#"))return a;if(Object(o.b)(a))return a;if(r)return t+a;const i=a.startsWith(t)?a:t+a.replace(/^\//,"");return n?e+i:i}(t,e,a,r)}}function i(e,t={}){const{withBaseUrl:a}=n();return a(e,t)}},377:function(e,t,a){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!r(e)}a.d(t,"b",(function(){return r})),a.d(t,"a",(function(){return o}))},378:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return c})),a.d(t,"c",(function(){return p}));var r=a(3),o=a(0),n=a.n(o),i=a(376);const l=e=>n.a.createElement("div",{style:{display:"inline-block",margin:2,overflow:"hidden",position:"relative",width:`calc(${100/e.cols}% - 4px)`,verticalAlign:"top"}},e.children),s=e=>n.a.createElement("div",{style:{fontSize:"0px",margin:"20px 0"}},n.a.Children.map(e.children,(t=>n.a.cloneElement(t,{cols:e.cols||4,fixedHeight:e.fixedHeight})))),c=e=>n.a.createElement(l,{cols:e.cols},n.a.createElement("a",{href:Object(i.a)(e.src),target:"_blank"},n.a.createElement("img",{src:Object(i.a)(e.src),alt:"result",style:{height:!0===e.fixedHeight?800/e.cols+"px":"auto",objectFit:!0===e.fixedHeight?"cover":"initial"}})),void 0!==e.caption&&n.a.createElement(d,null,e.caption)),d=e=>n.a.createElement("div",{style:{fontSize:16,fontStyle:"italic",textAlign:"center",margin:"10px 0px 15px"}},e.children),p=e=>{const{src:t,caption:a,...o}=e;return n.a.createElement("div",{style:{textAlign:"center"}},n.a.createElement("img",Object(r.a)({src:Object(i.a)(e.src)},o)),void 0!==e.caption&&n.a.createElement(d,null,e.caption))}},379:function(e,t,a){"use strict";var r=a(0),o=a.n(r),n=a(11),i=a(377),l=a(8);const s=Object(r.createContext)({collectLink:()=>{}});var c=a(376),d=function(e,t){var a={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(a[r[o]]=e[r[o]])}return a};t.a=function(e){var t,{isNavLink:a,to:p,href:m,activeClassName:h,isActive:u,"data-noBrokenLinkCheck":b,autoAddBaseUrl:f=!0}=e,g=d(e,["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"]);const{withBaseUrl:v}=Object(c.b)(),O=Object(r.useContext)(s),w=p||m,y=Object(i.a)(w),j=null==w?void 0:w.replace("pathname://",""),x=void 0!==j?(N=j,f&&(e=>e.startsWith("/"))(N)?v(N):N):void 0;var N;const T=Object(r.useRef)(!1),I=a?n.e:n.c,_=l.a.canUseIntersectionObserver;let k;Object(r.useEffect)((()=>(!_&&y&&window.docusaurus.prefetch(x),()=>{_&&k&&k.disconnect()})),[x,_,y]);const R=null!==(t=null==x?void 0:x.startsWith("#"))&&void 0!==t&&t,E=!x||!y||R;return x&&y&&!R&&!b&&O.collectLink(x),E?o.a.createElement("a",Object.assign({href:x},w&&!y&&{target:"_blank",rel:"noopener noreferrer"},g)):o.a.createElement(I,Object.assign({},g,{onMouseEnter:()=>{T.current||(window.docusaurus.preload(x),T.current=!0)},innerRef:e=>{var t,a;_&&e&&y&&(t=e,a=()=>{window.docusaurus.prefetch(x)},k=new window.IntersectionObserver((e=>{e.forEach((e=>{t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(k.unobserve(t),k.disconnect(),a())}))})),k.observe(t))},to:x||""},a&&{isActive:u,activeClassName:h}))}},380:function(e,t,a){"use strict";a.d(t,"b",(function(){return c})),a.d(t,"a",(function(){return d}));var r=a(0),o=a.n(r),n=a(379);const i=[{id:"outline-override",url:"../basics/room-templates#outline-override",name:"Outline override",usages:[{id:"corridors",description:"Outline override is used to properly handle corridors"}]},{id:"custom-rooms-and-connections",url:"../basics/level-graphs#pro-custom-rooms-and-connections",name:"Custom rooms",usages:[{id:"room-type",description:"The definition of rooms is enhanced with a custom type"}]},{id:"custom-post-processing",url:"../generators/post-process#custom-post-processing",name:"Custom post-processing",usages:[{id:"enemies",description:"A custom post-processing task is used to spawn enemies after a level is generated"},{id:"player-spawn",description:"Move the player to the spawn position of the level"}]}],l=[{id:"example-1",name:"Example 1",url:"../examples/example-1",features:[{id:"custom-post-processing",usage:"enemies",anchor:"enemies"}]},{id:"example-2",name:"Example 2",url:"../examples/example-2",features:[{id:"outline-override",usage:"corridors",anchor:"vertical-corridors"}]},{id:"dead-cells",name:"Dead Cells",url:"../examples/dead-cells",features:[{id:"custom-post-processing",usage:"enemies",anchor:"enemies"},{id:"custom-post-processing",usage:"player-spawn",anchor:"spawn-position"},{id:"custom-rooms-and-connections",usage:"room-type",anchor:"custom-room-and-connection-types"}]}];function s(e){if("undefined"!=typeof window){const t=window.location.href,a=t.split("/");(a[a.length-1].startsWith("#")||t.endsWith("/"))&&(e="../"+e)}return e}const c=e=>{const t=i.find((t=>t.id===e.id)).usages.map((e=>({...e,examples:[]})));return l.forEach((a=>{a.features.forEach((r=>{if(r.id===e.id){t.find((e=>e.id===r.usage)).examples.push({example:a,feature:r})}}))})),o.a.createElement("div",{className:"featureUsage"},o.a.createElement("div",{className:"featureUsage__title"},"Where is this feature used?"),o.a.createElement("div",{className:"featureUsage__description"},"Below is the list of examples/tutorials where we use this feature. Feel free to check them out if you're not sure how something works or if you just want to see this feature used in action."),o.a.createElement("table",null,o.a.createElement("tbody",null,t.map(((e,t)=>o.a.createElement("tr",{key:t},o.a.createElement("td",null,e.examples.map(((e,t)=>o.a.createElement("span",null,t?", ":"",o.a.createElement(n.a,{to:s(e.example.url+"#"+e.feature.anchor),onClick:()=>{return t=e.feature.anchor,void setTimeout((function(){var e=document.getElementById(t);e&&e.scrollIntoView()}),1e3);var t}},e.example.name))))),o.a.createElement("td",null,e.description)))))))},d=e=>{const t=l.find((t=>t.id===e.id)),a=[];return t.features.forEach((e=>{const t=i.find((t=>t.id===e.id)),r=t.usages.find((t=>t.id===e.usage));a.push({...e,feature:t,featureUsage:r})})),o.a.createElement("div",{className:"featureUsage"},o.a.createElement("div",{className:"featureUsage__title"},"List of used features"),o.a.createElement("div",{className:"featureUsage__description"},"Below is a list of features that are used in this example."),o.a.createElement("table",null,o.a.createElement("tbody",null,a.map(((e,t)=>o.a.createElement("tr",{key:t},o.a.createElement("td",null,o.a.createElement(n.a,{to:e.feature.url},e.feature.name)),o.a.createElement("td",null,e.featureUsage.description)))))))}}}]);