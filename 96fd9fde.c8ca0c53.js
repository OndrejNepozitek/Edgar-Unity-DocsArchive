(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{239:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return s})),o.d(t,"metadata",(function(){return i})),o.d(t,"toc",(function(){return c})),o.d(t,"default",(function(){return m}));var r=o(3),a=o(7),l=(o(0),o(371)),n=o(374),s=(o(376),{title:"Simple blocks"}),i={unversionedId:"3d/examples/simple-blocks",id:"3d/examples/simple-blocks",isDocsHomePage:!1,title:"Simple blocks",description:"In this tutorial, we will generate a simple level consisting of blocks (tiles) with a uniform size - 1 cubic meter. We will use the great Prototype Textures asset pack by Kenney.",source:"@site/docs\\3d\\examples\\simple-blocks.md",slug:"/3d/examples/simple-blocks",permalink:"/Edgar-Unity-DocsArchive/docs/next/3d/examples/simple-blocks",editUrl:"https://github.com/OndrejNepozitek/Edgar-Unity/tree/docusaurus/docs/3d/examples/simple-blocks.md",version:"current",sidebar:"3d",previous:{title:"Generator setup",permalink:"/Edgar-Unity-DocsArchive/docs/next/3d/basics/generator-setup"},next:{title:"Simple meshes",permalink:"/Edgar-Unity-DocsArchive/docs/next/3d/examples/simple-meshes"}},c=[{value:"Simple example",id:"simple-example",children:[{value:"Blocks",id:"blocks",children:[]},{value:"Doors",id:"doors",children:[]},{value:"Room templates",id:"room-templates",children:[]},{value:"Corridors",id:"corridors",children:[]},{value:"Level graph",id:"level-graph",children:[]},{value:"Door blockers",id:"door-blockers",children:[]},{value:"Results",id:"results",children:[]}]},{value:"Real-life example",id:"real-life-example",children:[{value:"Additional room templates",id:"additional-room-templates",children:[]},{value:"Wider doors",id:"wider-doors",children:[]},{value:"Door connectors",id:"door-connectors",children:[]},{value:"Level graph",id:"level-graph-1",children:[]},{value:"Results",id:"results-1",children:[]}]}],p={toc:c};function m(e){var t=e.components,o=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},p,o,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"In this tutorial, we will generate a simple level consisting of blocks (tiles) with a uniform size - 1 cubic meter. We will use the great ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.kenney.nl/assets/prototype-textures"}),"Prototype Textures")," asset pack by ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://twitter.com/KenneyNL"}),"Kenney"),"."),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/simple_1.png",caption:"Simple example",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/result_1.png",caption:"Real-life example",mdxType:"GalleryImage"})),Object(l.b)("h2",{id:"simple-example"},"Simple example"),Object(l.b)("h3",{id:"blocks"},"Blocks"),Object(l.b)("p",null,"The first step is to create some blocks that we will later use to create our room templates. We will use an orange block for walls and a black block for floors."),Object(l.b)(n.c,{src:"img/3d/examples/simple_blocks/blocks.png",caption:"Wall (left) and floor (right) blocks",mdxType:"Image"}),Object(l.b)("p",null,"Create an empty prefab game object and add a ",Object(l.b)("em",{parentName:"p"},"Door Marker (Grid3D)")," component. Then add a cube as a child object (",Object(l.b)("em",{parentName:"p"},"3D Object -> Cube"),"). Assign the corresponding material to the cube together with a ",Object(l.b)("em",{parentName:"p"},"Box Collider"),"."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("strong",{parentName:"p"},"Note:")," If you forget to add the ",Object(l.b)("em",{parentName:"p"},"Door Marker (Grid3D)")," component, the block will not be recognized when computing the outline of a room template.")),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/wall_not_aligned.png",caption:"Wall block (not aligned)",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/wall_aligned.png",caption:"Wall block (aligned)",mdxType:"GalleryImage"})),Object(l.b)("p",null,"The last step is to set the position of the cube to ",Object(l.b)("em",{parentName:"p"},"(0.5, 0.5, 0.5)"),". As you can see in the image (left) above, the block is not aligned to the grid in the background, but we want it to be."),Object(l.b)("h3",{id:"doors"},"Doors"),Object(l.b)("p",null,"The next step is to prepare a door prefab that we will use to mark our potential door positions. The setup is very simple. Create an empty game object and save it as a prefab. Then open the prefab and add the ",Object(l.b)("em",{parentName:"p"},"Door Handler (Grid3D)")," component. The door should look similar to the image below."),Object(l.b)(n.c,{src:"img/3d/examples/simple_blocks/door_empty.png",caption:"Empty door visualisation. The darker red shows the outward-facing side of the door.",mdxType:"Image"}),Object(l.b)("p",null,"There are multiple settings that can be changed in the component, but we can keep the default values for now."),Object(l.b)("h3",{id:"room-templates"},"Room templates"),Object(l.b)("p",null,"The next step is to prepare a simple room template. Create an empty room template prefab by navigating to ",Object(l.b)("em",{parentName:"p"},"Create -> Edgar (Grid3D) -> Dungeon room template"),". If you open the prefab, you should see that there are two child game objects - ",Object(l.b)("em",{parentName:"p"},"Blocks")," and ",Object(l.b)("em",{parentName:"p"},"Doors"),"."),Object(l.b)("p",null,"First, place some previously created block prefabs as children of the ",Object(l.b)("em",{parentName:"p"},"Blocks")," object and build a simple room. For now, keep holes at places where you plan to have doors. Also, make sure that you only use integer coordinates when moving the blocks. Otherwise, you might get unexpected results when computing the outline of the room template. Also, remember to always use the prefabs of the blocks, so that if you later decide to change some textures or colliders, the changes are automatically propagated."),Object(l.b)("p",null,"The result should look something like the image below (left). If everything works correctly, you should see a double yellow line around the outline of the room template."),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/room_template_no_doors.png",caption:"Simple room template (without doors)",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/room_template_with_doors.png",caption:"Simple room template (with doors)",mdxType:"GalleryImage"})),Object(l.b)("p",null,"Next, we have to mark the doors. Use the prefab that we created previously and place it under the ",Object(l.b)("em",{parentName:"p"},"Doors")," game object. For each door, use the ",Object(l.b)("em",{parentName:"p"},"Rotate -90"),"/",Object(l.b)("em",{parentName:"p"},"Rotate +90")," buttons to rotate the door in a way the darker-red side points away from the room. The result should look like the image above (right)."),Object(l.b)("h3",{id:"corridors"},"Corridors"),Object(l.b)("p",null,"The next step is creating a corridor that will connect rooms. The process is the same as for normal rooms, just make sure that there are exactly two doors."),Object(l.b)(n.c,{src:"img/3d/examples/simple_blocks/corridor.png",caption:"Empty door visualisation. The darker red shows the outward-facing side of the door.",mdxType:"Image"}),Object(l.b)("h3",{id:"level-graph"},"Level graph"),Object(l.b)("p",null,"For this simple variant of this example, we will use a very simple acyclic level graph that will guarantuee super-fast generation times."),Object(l.b)(n.c,{src:"img/3d/examples/simple_blocks/level_graph_simple.png",caption:"Very simple acyclic level graph",mdxType:"Image"}),Object(l.b)("h3",{id:"door-blockers"},"Door blockers"),Object(l.b)("p",null,"If we now generate a level, we will get something similar to the image below. As you can see, there are holes at the places where we marked potential doors, which were later not used by the generator."),Object(l.b)(n.c,{src:"img/3d/examples/simple_blocks/simple_no_blockers.png",caption:"Example result without door blockers.",mdxType:"Image"}),Object(l.b)("p",null,"The solution to this problem is so-called ",Object(l.b)("em",{parentName:"p"},"door blockers"),". These are game objects that will be used when a door is not connected to any other room in a generated level. Open the door prefab, create an empty child game object called ",Object(l.b)("em",{parentName:"p"},"Blocker")," and inside place anything that you want to block the door with when not used. For this example, I used the wall block prefab. Also, make sure that the blocker is correctly aligned to the red door gizmo."),Object(l.b)("p",null,"The last step is to assign the blocker game object to the ",Object(l.b)("em",{parentName:"p"},"Blockers")," field in the ",Object(l.b)("em",{parentName:"p"},"Door Handler Grid 3D")," script. By doing so, you let the generator know that the ",Object(l.b)("em",{parentName:"p"},"Blocker")," is not an ordinary game object and needs some special care after a level is generated."),Object(l.b)(n.c,{src:"img/3d/examples/simple_blocks/door_only_blocker.png",caption:"Door with a blocker",mdxType:"Image"}),Object(l.b)("h3",{id:"results"},"Results"),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/simple_2.png",caption:"Example result",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/simple_3.png",caption:"Example result",mdxType:"GalleryImage"})),Object(l.b)("h2",{id:"real-life-example"},"Real-life example"),Object(l.b)("h3",{id:"additional-room-templates"},"Additional room templates"),Object(l.b)("p",null,"We can create some more room templates to make the levels more diverse."),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/corridor2.png",caption:"Shorter corridor",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/room_template2.png",caption:"L-shaped room",mdxType:"GalleryImage"})),Object(l.b)("h3",{id:"wider-doors"},"Wider doors"),Object(l.b)("p",null,"We can also use doors that are wider than a single block - just increase the ",Object(l.b)("em",{parentName:"p"},"Width")," parameter on the ",Object(l.b)("em",{parentName:"p"},"Door Handler")," script."),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/corridor_wide.png",caption:"Corridor with different sizes of doors on each end",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/room_template_wide.png",caption:"Room with different sizes of doors",mdxType:"GalleryImage"})),Object(l.b)("h3",{id:"door-connectors"},"Door connectors"),Object(l.b)("p",null,"Previously, we used a door blocker to make sure that a door hole is blocked if it is not used. But we can also do the opposite thing - use a so-called ",Object(l.b)("em",{parentName:"p"},"door connector")," each time a door used. We can use that to place some decorations around doors."),Object(l.b)("p",null,"The process is the same as for blockers. Create a child object called ",Object(l.b)("em",{parentName:"p"},"Connector")," and place any decorations inside. Then assign this game object to the ",Object(l.b)("em",{parentName:"p"},"Connectors")," field of the ",Object(l.b)("em",{parentName:"p"},"Door Handler")," script."),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/door_connector.png",caption:"Two red decorations are placed on each side of the door",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/level_connectors.png",caption:"How it looks like when the connector is used",mdxType:"GalleryImage"})),Object(l.b)("h3",{id:"level-graph-1"},"Level graph"),Object(l.b)("p",null,"We will use a level graph that contains a cycle. However, you must be very careful when using cycles in level graphs. For example, with the current set of room templates and corridors, it is very hard to generate a cycle that contains exactly 5 rooms. The reason is that there are only a very few ways of arranging the rooms and corridors so that they can form a cycle on 5 rooms. But if we use a cycle that contains 4 or 6 rooms, everything gets much simpler and the generator can produce a level quite quickly."),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/level_graph_cycle_4.png",caption:"Simple - the cycle contains 4 rooms, generates under 0.2s",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/level_graph_cycle_5.png",caption:"Hard - the cycle contains 5 rooms, often timeouts",mdxType:"GalleryImage"})),Object(l.b)("h3",{id:"results-1"},"Results"),Object(l.b)(n.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/result_3.png",caption:"Example result",mdxType:"GalleryImage"}),Object(l.b)(n.b,{src:"img/3d/examples/simple_blocks/result_2.png",caption:"Example result",mdxType:"GalleryImage"})))}m.isMDXComponent=!0},371:function(e,t,o){"use strict";o.d(t,"a",(function(){return m})),o.d(t,"b",(function(){return u}));var r=o(0),a=o.n(r);function l(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){l(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,a=function(e,t){if(null==e)return{};var o,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},m=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var o=e.components,r=e.mdxType,l=e.originalType,n=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(o),b=r,u=m["".concat(n,".").concat(b)]||m[b]||d[b]||l;return o?a.a.createElement(u,s(s({ref:t},c),{},{components:o})):a.a.createElement(u,s({ref:t},c))}));function u(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=o.length,n=new Array(l);n[0]=b;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,n[1]=s;for(var c=2;c<l;c++)n[c]=o[c];return a.a.createElement.apply(null,n)}return a.a.createElement.apply(null,o)}b.displayName="MDXCreateElement"},372:function(e,t,o){"use strict";o.d(t,"b",(function(){return l})),o.d(t,"a",(function(){return n}));var r=o(22),a=o(373);function l(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(r.default)();return{withBaseUrl:(o,r)=>function(e,t,o,{forcePrependBaseUrl:r=!1,absolute:l=!1}={}){if(!o)return o;if(o.startsWith("#"))return o;if(Object(a.b)(o))return o;if(r)return t+o;const n=o.startsWith(t)?o:t+o.replace(/^\//,"");return l?e+n:n}(t,e,o,r)}}function n(e,t={}){const{withBaseUrl:o}=l();return o(e,t)}},373:function(e,t,o){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}o.d(t,"b",(function(){return r})),o.d(t,"a",(function(){return a}))},374:function(e,t,o){"use strict";o.d(t,"a",(function(){return i})),o.d(t,"b",(function(){return c})),o.d(t,"c",(function(){return m}));var r=o(3),a=o(0),l=o.n(a),n=o(372);const s=e=>l.a.createElement("div",{style:{display:"inline-block",margin:2,overflow:"hidden",position:"relative",width:`calc(${100/e.cols}% - 4px)`,verticalAlign:"top"}},e.children),i=e=>l.a.createElement("div",{style:{fontSize:"0px",margin:"20px 0"}},l.a.Children.map(e.children,(t=>l.a.cloneElement(t,{cols:e.cols||4,fixedHeight:e.fixedHeight})))),c=e=>l.a.createElement(s,{cols:e.cols},l.a.createElement("a",{href:Object(n.a)(e.src),target:"_blank"},l.a.createElement("img",{src:Object(n.a)(e.src),alt:"result",style:{height:!0===e.fixedHeight?800/e.cols+"px":"auto",objectFit:!0===e.fixedHeight?"cover":"initial"}})),void 0!==e.caption&&l.a.createElement(p,null,e.caption)),p=e=>l.a.createElement("div",{style:{fontSize:16,fontStyle:"italic",textAlign:"center",margin:"10px 0px 15px"}},e.children),m=e=>{const{src:t,caption:o,...a}=e;return l.a.createElement("div",{style:{textAlign:"center"}},l.a.createElement("img",Object(r.a)({src:Object(n.a)(e.src)},a)),void 0!==e.caption&&l.a.createElement(p,null,e.caption))}},375:function(e,t,o){"use strict";var r=o(0),a=o.n(r),l=o(11),n=o(373),s=o(8);const i=Object(r.createContext)({collectLink:()=>{}});var c=o(372),p=function(e,t){var o={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(o[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(o[r[a]]=e[r[a]])}return o};t.a=function(e){var t,{isNavLink:o,to:m,href:d,activeClassName:b,isActive:u,"data-noBrokenLinkCheck":h,autoAddBaseUrl:g=!0}=e,f=p(e,["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"]);const{withBaseUrl:y}=Object(c.b)(),O=Object(r.useContext)(i),j=m||d,x=Object(n.a)(j),v=null==j?void 0:j.replace("pathname://",""),w=void 0!==v?(k=v,g&&(e=>e.startsWith("/"))(k)?y(k):k):void 0;var k;const _=Object(r.useRef)(!1),T=o?l.e:l.c,E=s.a.canUseIntersectionObserver;let N;Object(r.useEffect)((()=>(!E&&x&&window.docusaurus.prefetch(w),()=>{E&&N&&N.disconnect()})),[w,E,x]);const I=null!==(t=null==w?void 0:w.startsWith("#"))&&void 0!==t&&t,D=!w||!x||I;return w&&x&&!I&&!h&&O.collectLink(w),D?a.a.createElement("a",Object.assign({href:w},j&&!x&&{target:"_blank",rel:"noopener noreferrer"},f)):a.a.createElement(T,Object.assign({},f,{onMouseEnter:()=>{_.current||(window.docusaurus.preload(w),_.current=!0)},innerRef:e=>{var t,o;E&&e&&x&&(t=e,o=()=>{window.docusaurus.prefetch(w)},N=new window.IntersectionObserver((e=>{e.forEach((e=>{t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(N.unobserve(t),N.disconnect(),o())}))})),N.observe(t))},to:w||""},o&&{isActive:u,activeClassName:b}))}},376:function(e,t,o){"use strict";o.d(t,"b",(function(){return c})),o.d(t,"a",(function(){return p}));var r=o(0),a=o.n(r),l=o(375);const n=[{id:"outline-override",url:"../basics/room-templates#outline-override",name:"Outline override",usages:[{id:"corridors",description:"Outline override is used to properly handle corridors"}]},{id:"custom-rooms-and-connections",url:"../basics/level-graphs#pro-custom-rooms-and-connections",name:"Custom rooms",usages:[{id:"room-type",description:"The definition of rooms is enhanced with a custom type"}]},{id:"custom-post-processing",url:"../generators/post-process#custom-post-processing",name:"Custom post-processing",usages:[{id:"enemies",description:"A custom post-processing task is used to spawn enemies after a level is generated"},{id:"player-spawn",description:"Move the player to the spawn position of the level"}]}],s=[{id:"example-1",name:"Example 1",url:"../examples/example-1",features:[{id:"custom-post-processing",usage:"enemies",anchor:"enemies"}]},{id:"example-2",name:"Example 2",url:"../examples/example-2",features:[{id:"outline-override",usage:"corridors",anchor:"vertical-corridors"}]},{id:"dead-cells",name:"Dead Cells",url:"../examples/dead-cells",features:[{id:"custom-post-processing",usage:"enemies",anchor:"enemies"},{id:"custom-post-processing",usage:"player-spawn",anchor:"spawn-position"},{id:"custom-rooms-and-connections",usage:"room-type",anchor:"custom-room-and-connection-types"}]}];function i(e){if("undefined"!=typeof window){const t=window.location.href,o=t.split("/");(o[o.length-1].startsWith("#")||t.endsWith("/"))&&(e="../"+e)}return e}const c=e=>{const t=n.find((t=>t.id===e.id)).usages.map((e=>({...e,examples:[]})));return s.forEach((o=>{o.features.forEach((r=>{if(r.id===e.id){t.find((e=>e.id===r.usage)).examples.push({example:o,feature:r})}}))})),a.a.createElement("div",{className:"featureUsage"},a.a.createElement("div",{className:"featureUsage__title"},"Where is this feature used?"),a.a.createElement("div",{className:"featureUsage__description"},"Below is the list of examples/tutorials where we use this feature. Feel free to check them out if you're not sure how something works or if you just want to see this feature used in action."),a.a.createElement("table",null,a.a.createElement("tbody",null,t.map(((e,t)=>a.a.createElement("tr",{key:t},a.a.createElement("td",null,e.examples.map(((e,t)=>a.a.createElement("span",null,t?", ":"",a.a.createElement(l.a,{to:i(e.example.url+"#"+e.feature.anchor),onClick:()=>{return t=e.feature.anchor,void setTimeout((function(){var e=document.getElementById(t);e&&e.scrollIntoView()}),1e3);var t}},e.example.name))))),a.a.createElement("td",null,e.description)))))))},p=e=>{const t=s.find((t=>t.id===e.id)),o=[];return t.features.forEach((e=>{const t=n.find((t=>t.id===e.id)),r=t.usages.find((t=>t.id===e.usage));o.push({...e,feature:t,featureUsage:r})})),a.a.createElement("div",{className:"featureUsage"},a.a.createElement("div",{className:"featureUsage__title"},"List of used features"),a.a.createElement("div",{className:"featureUsage__description"},"Below is a list of features that are used in this example."),a.a.createElement("table",null,a.a.createElement("tbody",null,o.map(((e,t)=>a.a.createElement("tr",{key:t},a.a.createElement("td",null,a.a.createElement(l.a,{to:e.feature.url},e.feature.name)),a.a.createElement("td",null,e.featureUsage.description)))))))}}}]);